function C = haddl(A,UMat,VMat)
    assert(A.height == size(UMat,1));
    assert(A.width == size(VMat,1));

    if A.blockType == 'L'
        UMat = [A.UMat UMat];
        VMat = [A.VMat VMat];
        C = struct('height',A.height,'width',A.width,...
                    'level',A.level,...
                    'trg',A.trg, 'src',A.src,...
                    'blockType',A.blockType,...
                    'UMat',UMat, 'VMat',VMat,...
                    'EPS',A.EPS, 'MAXRANK',A.MAXRANK, 'MINN',A.MINN);
        C = hcompress(C);
    elseif A.blockType == 'D'
        DMat = A.DMat + UMat*VMat';
        C = struct('height',A.height,'width',A.width,...
                    'level',A.level,...
                    'trg',A.trg, 'src',A.src,...
                    'blockType',A.blockType,...
                    'DMat',DMat,...
                    'EPS',A.EPS, 'MAXRANK',A.MAXRANK, 'MINN',A.MINN);
    elseif A.blockType == 'H'
        childHMat = cell(4,4);
        hoffset = 0;
        for i = 1:4
            woffset = 0;
            for j = 1:4
                childHMat{i,j} = haddl(A.childHMat{i,j},...
                            UMat(hoffset+(1:A.childHMat{i,j}.height),:),...
                            VMat(woffset+(1:A.childHMat{i,j}.width),:));
                woffset = woffset + A.childHMat{i,j}.width;
                if j == 4
                    hoffset = hoffset + A.childHMat{i,j}.height;
                end
            end
        end
        C = struct('height',A.height,'width',A.width,...
                    'level',A.level,...
                    'trg',A.trg, 'src',A.src,...
                    'blockType',A.blockType,...
                    'childHMat',{childHMat},...
                    'EPS',A.EPS, 'MAXRANK',A.MAXRANK, 'MINN',A.MINN);
    end
end